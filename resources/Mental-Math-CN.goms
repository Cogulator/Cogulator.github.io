*One of the features we're currently working on in Cogulator is an analysis of Working Memory load in the Gantt chart. To simulate working memory load, Cogulator adds chunks to working memory each time certain operators are used. Those operators include: Store, Recall, Look, Search, Perceptual_processor, Listen, or Think. Store can also be used to explicitly force a chunk into working memory. In this example, we model someone adding two, three digit numbers in their head. Each chunk added to working memory is represented as a colored block in the Gantt chart. Over time, those memories begin to decay, until they're no longer accessible. That decay is symbolized in the chart with the use of transparency - the blocks becoming more and more translucent until they leave memory altogether. Where memory load exceeds seven chunks, the display is marked with a red triangle.Goal: Listen To Problem*What is 354 plus 412?. Hear What is <3[354]> *three. Hear <5[354]> *fifty. Hear <4[354]> * four. Hear plus. Hear <4[412]>. Hear and <1[412]>. Hear and <2[412]>Goal: Calculate Answer. Goal: Add 4 plus 2*Internal thought. . Say Well, <4[354]> plus <2[412]> is 6. . Recall <1st6_of766>  (150 ms). Goal: Add_5_plus_1. . Say <5[354]> plus <1[412]> is 6. . Recall <2nd6_of766>  (150 ms). Goal: Add_3_plus_4. . Say <3[354]> plus <4[412]> is 7. . Recall <7_of766> (150 ms)Goal: Encode Answer.Store <766>Goal: Speak Answer. Verify answer (5 seconds). Say <7_of766> <2nd6_of766>  <1st6_of766> 766